label       = emcc
# povray and blender are mixed C and C++ benchmarks (and neither has a _s speed version)
runlist     = 500.perlbench_r, 502.gcc_r, 505.mcf_r, 508.namd_r, 510.parest_r, 511.povray_r, 519.lbm_r, 520.omnetpp_r, 523.xalancbmk_r, 525.x264_r, 526.blender_r, 531.deepsjeng_r, 538.imagick_r, 541.leela_r, 544.nab_r, 557.xz_r
size        = test
iterations  = 1
tune        = base
default:
    CC = emcc
    CXX = em++

    CC_VERSION_OPTION = -v
    CXX_VERSION_OPTION = -v
    
    # -fno-strict-aliasing: mentioned under portability in SPEC docs for several programs
    # see e.g. https://www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html
    # NOTE OPTIMIZE is also passed to the linker, but EXTRA_PORTABILITY isn't... So have to put the last three args here...
    OPTIMIZE = -O3 -fno-strict-aliasing -s TOTAL_MEMORY=1073741824 -s ALLOW_MEMORY_GROWTH=1 -s NODERAWFS=1
    
    CXXOPTIMIZE = -s DISABLE_EXCEPTION_CATCHING=0
    
    # Portability flags that apply to all programs
    # SPEC_LINUX_IA32: set to 32 bit (copied from Example-clang-llvm-linux-x86.cfg)
    # disable flag passed by default from emcc -Werror=implicit-function-declaration (see emcc --cflags output)
    # TOTAL_MEMORY: increase initial memory size, otherwise compiling, e.g., 531.deepsjeng_r fails with Memory is not large enough for static data (11983920) plus the stack (5242880), please increase TOTAL_MEMORY (16777216) to at least 17227824
    # ALLOW_MEMORY_GROWTH: allow memory allocation in wasm, otherwise memory.grow is not allowed at all and all malloc/new requests will fail (?)
    # use Node.JS FS API in wasm (all until here was from 2019-01-...)
    EXTRA_PORTABILITY = -DSPEC_LINUX_IA32 -Wno-error=implicit-function-declaration -D_FILE_OFFSET_BITS=64

    # -z muldefs is not supported by clang, even though SPEC recommends it to "fix" multiply defined symbol linker errors (with gcc it would work)
    # LDOPTIMIZE = -z muldefs
    # LDCFLAGS = -z muldefs

    # ERROR_ON_UNDEFINED_SYMBOLS: only warn if there are symbols missing, not error (programs will likely fail at runtime, but for static analysis that is good enough)
    # set output file extension to js to generate Node.JS compatible file
    LDOUT = -s ERROR_ON_UNDEFINED_SYMBOLS=0 -o $@.js

525.x264_r,625.x264_s:
    # ELIDE_CODE: disable getopt.c, fails linking 525.x264_r for some reason
    PORTABILITY = -DELIDE_CODE -DHAVE_STRERROR

500.perlbench_r,600.perlbench_s:
    # I_FCNTL: explicitly #include<fcntl.h> which is required in musl libc (that emcc uses)
    # SPEC_NO_USE_STDIO_PTR and SPEC_NO_USE_STDIO_BASE: see spec_config.h, disable Perl IO which causes compile errors due to meddling with libc internal _IO_FILE structs (which seem to not exist in musl libc?)
    # HAS_DUP2: fix linker error "Linking globals named 'dup2': symbol multiply defined!" due to util.c defining a second dup2 function (no idea who defines the first one, but who cares...)
    PORTABILITY = -std=gnu89 -DI_FCNTL -DSPEC_NO_USE_STDIO_PTR -DSPEC_NO_USE_STDIO_BASE -DHAS_DUP2

502.gcc_r,602.gcc_s:
    # -fgnu89-inline: see https://www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html for portability options
    # ELIDE_CODE: similar to x264, do not build getopt code since musl libc provides its own, otherwise linking fails due to multiple symbol definitions
    # HAVE_STRERROR: seems to work as it did for x264
    # HAVE_MKSTEMPS: similar problem here: multiply defined function mkstmps(), see libib_config.h for a solution (?)
    # FIXME HAVE_MKSTEMPS is never used by any #ifdef :/ -> did NOT work :(
    # in the end, I manually linked and just left out mkstemps.o
    PORTABILITY = -fgnu89-inline -DELIDE_CODE -DHAVE_STRERROR -DHAVE_MKSTEMPS

523.xalancbmk_r,623.xalancbmk_s:
    # -DSPEC_LINUX from Example-clang-llvm-linux-x86.cfg does not work, instead I had to dig deeper and fiddle with some internal #ifdefs:
    # Error in ./xercesc/util/AutoSense.hpp:113:6: error: Code requires port to host OS!
    # explicitly set Linux OS (I have no idea what this is used for in the code, but since emscripten basically implements the Linux x86 syscall interface, it should hopefully work...)
    PORTABILITY = -D__linux__

526.blender_r:
    # copied from Example-clang-llvm-linux-x86.cfg
    CPORTABILITY = -funsigned-char
    CXXPORTABILITY = -D__BOOL_DEFINED 