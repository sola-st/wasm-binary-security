filename: ./538.imagick_r/imagick_r.wasm
  benchmark: 538.imagick_r
  binary:    imagick_r.wasm

Functions:      1068
  Imported:       33
  Non-imported: 1035
  Exported:       10

Tables: 1 (should be 1 in Wasm v1)
  Table entries at init:        98
  Of those, unique functions:   91 (i.e., at least 8.52% of all functions can be called indirectly, because they are in the [indirect call] table)

Instructions:    517550
  call:           17283 (3.34% of all instructions)
  call_indirect:   1901 (0.37% of all, 9.91% of all calls)

Globals:
  #0 i32
     init: i32.const 5403616
      599 × global.get   1195 × global.set   1794 total (33/67% split)

Likely the stack pointer:       Global #0
Functions using stack pointer:  599 (57.87% of all non-imported functions)
Stack increments: (How many functions increment the stack pointer by how much? Can also handle multiple increments per function, that's why it is an array of increments.)
    1  (0.10%) × [-41504]
    1  (0.10%) × [-24688]
    1  (0.10%) × [-24624]
    1  (0.10%) × [-20688]
    1  (0.10%) × [-20544]
    1  (0.10%) × [-18944]
    1  (0.10%) × [-17104]
    1  (0.10%) × [-16480]
    1  (0.10%) × [-16464]
    1  (0.10%) × [-12976]
    1  (0.10%) × [-12960]
    1  (0.10%) × [-12448]
    1  (0.10%) × [-12416]
    1  (0.10%) × [-12368]
    1  (0.10%) × [-12336]
    1  (0.10%) × [-11552]
    1  (0.10%) × [-9280]
    1  (0.10%) × [-8960]
    1  (0.10%) × [-8704]
    1  (0.10%) × [-8560]
    1  (0.10%) × [-8480]
    1  (0.10%) × [-8464]
    1  (0.10%) × [-8400]
    1  (0.10%) × [-8368]
    1  (0.10%) × [-8352]
    1  (0.10%) × [-8336]
    1  (0.10%) × [-8240]
    1  (0.10%) × [-6304]
    1  (0.10%) × [-5056]
    1  (0.10%) × [-4624]
    1  (0.10%) × [-4592]
    1  (0.10%) × [-4544]
    1  (0.10%) × [-4512]
    1  (0.10%) × [-4336]
    1  (0.10%) × [-4320]
    1  (0.10%) × [-1712]
    1  (0.10%) × [-1120]
    1  (0.10%) × [-1056]
    1  (0.10%) × [-832]
    1  (0.10%) × [-656]
    1  (0.10%) × [-432]
    1  (0.10%) × [-352]
    1  (0.10%) × [-320]
    1  (0.10%) × [-304]
    2  (0.19%) × [-12304]
    2  (0.19%) × [-8384]
    2  (0.19%) × [-8304]
    2  (0.19%) × [-4528]
    2  (0.19%) × [-4496]
    2  (0.19%) × [-4384]
    2  (0.19%) × [-560]
    2  (0.19%) × [-288]
    2  (0.19%) × [-240]
    2  (0.19%) × [-192]
    2  (0.19%) × [-176]
    3  (0.29%) × [-8256]
    3  (0.29%) × [-4096]
    3  (0.29%) × [-528]
    3  (0.29%) × [-272]
    3  (0.29%) × [-256]
    4  (0.39%) × [-8192]
    4  (0.39%) × [-4256]
    4  (0.39%) × [-4240]
    4  (0.39%) × [-384]
    4  (0.39%) × [-144]
    5  (0.48%) × [-8272]
    5  (0.48%) × [-208]
    5  (0.48%) × [-112]
    6  (0.58%) × [-4272]
    7  (0.68%) × [-4192]
    7  (0.68%) × [-160]
    7  (0.68%) × [-128]
    8  (0.77%) × [-4208]
    9  (0.87%) × [-4224]
   10  (0.97%) × [-96]
   13  (1.26%) × [-4176]
   13  (1.26%) × [-4112]
   15  (1.45%) × [-4160]
   16  (1.55%) × [-80]
   28  (2.71%) × [-4128]
   29  (2.80%) × [-4144]
   32  (3.09%) × [-64]
   43  (4.15%) × [-32]
   67  (6.47%) × [-48]
  170 (16.43%) × [-16]
  439 (42.42%) × []
  functions with stack allocation total: 596 (57.58%)

csv lines to extract for sp analysis and plots:
benchmark,binary,funccount,percent,sp_increments,increment_sum,increment_sum_abs
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-41504]",-41504,41504
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-24688]",-24688,24688
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-24624]",-24624,24624
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-20688]",-20688,20688
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-20544]",-20544,20544
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-18944]",-18944,18944
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-17104]",-17104,17104
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-16480]",-16480,16480
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-16464]",-16464,16464
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12976]",-12976,12976
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12960]",-12960,12960
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12448]",-12448,12448
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12416]",-12416,12416
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12368]",-12368,12368
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-12336]",-12336,12336
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-11552]",-11552,11552
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-9280]",-9280,9280
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8960]",-8960,8960
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8704]",-8704,8704
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8560]",-8560,8560
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8480]",-8480,8480
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8464]",-8464,8464
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8400]",-8400,8400
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8368]",-8368,8368
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8352]",-8352,8352
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8336]",-8336,8336
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-8240]",-8240,8240
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-6304]",-6304,6304
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-5056]",-5056,5056
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4624]",-4624,4624
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4592]",-4592,4592
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4544]",-4544,4544
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4512]",-4512,4512
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4336]",-4336,4336
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-4320]",-4320,4320
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-1712]",-1712,1712
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-1120]",-1120,1120
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-1056]",-1056,1056
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-832]",-832,832
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-656]",-656,656
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-432]",-432,432
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-352]",-352,352
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-320]",-320,320
sp_csv_line:"538.imagick_r","imagick_r.wasm",1,0.096618354,"[-304]",-304,304
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-12304]",-12304,12304
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-8384]",-8384,8384
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-8304]",-8304,8304
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-4528]",-4528,4528
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-4496]",-4496,4496
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-4384]",-4384,4384
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-560]",-560,560
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-288]",-288,288
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-240]",-240,240
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-192]",-192,192
sp_csv_line:"538.imagick_r","imagick_r.wasm",2,0.19323671,"[-176]",-176,176
sp_csv_line:"538.imagick_r","imagick_r.wasm",3,0.28985506,"[-8256]",-8256,8256
sp_csv_line:"538.imagick_r","imagick_r.wasm",3,0.28985506,"[-4096]",-4096,4096
sp_csv_line:"538.imagick_r","imagick_r.wasm",3,0.28985506,"[-528]",-528,528
sp_csv_line:"538.imagick_r","imagick_r.wasm",3,0.28985506,"[-272]",-272,272
sp_csv_line:"538.imagick_r","imagick_r.wasm",3,0.28985506,"[-256]",-256,256
sp_csv_line:"538.imagick_r","imagick_r.wasm",4,0.38647342,"[-8192]",-8192,8192
sp_csv_line:"538.imagick_r","imagick_r.wasm",4,0.38647342,"[-4256]",-4256,4256
sp_csv_line:"538.imagick_r","imagick_r.wasm",4,0.38647342,"[-4240]",-4240,4240
sp_csv_line:"538.imagick_r","imagick_r.wasm",4,0.38647342,"[-384]",-384,384
sp_csv_line:"538.imagick_r","imagick_r.wasm",4,0.38647342,"[-144]",-144,144
sp_csv_line:"538.imagick_r","imagick_r.wasm",5,0.4830918,"[-8272]",-8272,8272
sp_csv_line:"538.imagick_r","imagick_r.wasm",5,0.4830918,"[-208]",-208,208
sp_csv_line:"538.imagick_r","imagick_r.wasm",5,0.4830918,"[-112]",-112,112
sp_csv_line:"538.imagick_r","imagick_r.wasm",6,0.5797101,"[-4272]",-4272,4272
sp_csv_line:"538.imagick_r","imagick_r.wasm",7,0.6763285,"[-4192]",-4192,4192
sp_csv_line:"538.imagick_r","imagick_r.wasm",7,0.6763285,"[-160]",-160,160
sp_csv_line:"538.imagick_r","imagick_r.wasm",7,0.6763285,"[-128]",-128,128
sp_csv_line:"538.imagick_r","imagick_r.wasm",8,0.77294683,"[-4208]",-4208,4208
sp_csv_line:"538.imagick_r","imagick_r.wasm",9,0.8695652,"[-4224]",-4224,4224
sp_csv_line:"538.imagick_r","imagick_r.wasm",10,0.9661836,"[-96]",-96,96
sp_csv_line:"538.imagick_r","imagick_r.wasm",13,1.2560387,"[-4176]",-4176,4176
sp_csv_line:"538.imagick_r","imagick_r.wasm",13,1.2560387,"[-4112]",-4112,4112
sp_csv_line:"538.imagick_r","imagick_r.wasm",15,1.4492754,"[-4160]",-4160,4160
sp_csv_line:"538.imagick_r","imagick_r.wasm",16,1.5458937,"[-80]",-80,80
sp_csv_line:"538.imagick_r","imagick_r.wasm",28,2.705314,"[-4128]",-4128,4128
sp_csv_line:"538.imagick_r","imagick_r.wasm",29,2.8019323,"[-4144]",-4144,4144
sp_csv_line:"538.imagick_r","imagick_r.wasm",32,3.0917873,"[-64]",-64,64
sp_csv_line:"538.imagick_r","imagick_r.wasm",43,4.154589,"[-32]",-32,32
sp_csv_line:"538.imagick_r","imagick_r.wasm",67,6.47343,"[-48]",-48,48
sp_csv_line:"538.imagick_r","imagick_r.wasm",170,16.425121,"[-16]",-16,16
sp_csv_line:"538.imagick_r","imagick_r.wasm",439,42.41546,"[]",0,0

Counts of function types (96 unique types):
    1  (0.09%) × [i32, i32] -> [i64]
    1  (0.09%) × [i32, i32] -> [f32]
    1  (0.09%) × [i32, i32, i32, i32, i32] -> [f64]
    1  (0.09%) × [i32, i32, i32, i32, i32, i32] -> [f64]
    1  (0.09%) × [i32, i32, i32, i32, i32, i32, i32] -> [f64]
    1  (0.09%) × [i32, i32, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    1  (0.09%) × [i32, i32, i32, i32, i32, i32, f64, i32] -> [i32]
    1  (0.09%) × [i32, i32, i32, i32, f64, i32] -> [i32]
    1  (0.09%) × [i32, i32, i32, f32] -> [f32]
    1  (0.09%) × [i32, i32, i32, f32] -> [f64]
    1  (0.09%) × [i32, i32, i32, f64, f64, i32, i32] -> []
    1  (0.09%) × [i32, i32, i64] -> []
    1  (0.09%) × [i32, i32, f32, i32, i32] -> [i32]
    1  (0.09%) × [i32, i32, f64] -> [i32]
    1  (0.09%) × [i32, i32, f64, i32] -> []
    1  (0.09%) × [i32, i32, f64, f64, f64, f64, i32] -> [i32]
    1  (0.09%) × [i32, i64] -> [i64]
    1  (0.09%) × [i32, i64, i32] -> [i32]
    1  (0.09%) × [i32, i64, i32, i32] -> [i32]
    1  (0.09%) × [i32, i64, i64, i32] -> [i32]
    1  (0.09%) × [i32, f32] -> []
    1  (0.09%) × [i32, f32] -> [f32]
    1  (0.09%) × [i32, f32, i32, f32, i32] -> []
    1  (0.09%) × [i32, f32, f32, f32, f32, i32] -> [i32]
    1  (0.09%) × [i32, f64] -> [f64]
    1  (0.09%) × [i32, f64, i32] -> [f64]
    1  (0.09%) × [i32, f64, i32, i32, i32, i32] -> [i32]
    1  (0.09%) × [i32, f64, f64] -> []
    1  (0.09%) × [i32, f64, f64] -> [f64]
    1  (0.09%) × [i32, f64, f64, i32] -> []
    1  (0.09%) × [i32, f64, f64, i32, f64, i32] -> [i32]
    1  (0.09%) × [i32, f64, f64, f64, i32] -> [i32]
    1  (0.09%) × [i32, f64, f64, f64, f64] -> []
    1  (0.09%) × [i32, f64, f64, f64, f64, i32] -> [i32]
    1  (0.09%) × [i32, f64, f64, f64, f64, f64, f64] -> []
    1  (0.09%) × [i64, i32, i32] -> []
    1  (0.09%) × [i64, i32, i32] -> [i32]
    1  (0.09%) × [i64, i64] -> [f32]
    1  (0.09%) × [i64, i64] -> [f64]
    1  (0.09%) × [i64, i64, i64, i64] -> [i32]
    1  (0.09%) × [f32, f32, f32, f32] -> [f32]
    1  (0.09%) × [f64, i32] -> [i32]
    2  (0.19%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> []
    2  (0.19%) × [i32, i32, i32, i32, i32, i32, i32, i32] -> [i32]
    2  (0.19%) × [i32, i32, i32, i64] -> [i64]
    2  (0.19%) × [i32, i32, i32, f32, i64, i32, i32] -> [i32]
    2  (0.19%) × [i32, i32, i32, f64, i32] -> []
    2  (0.19%) × [i32, i32, i32, f64, i32] -> [i32]
    2  (0.19%) × [i32, i32, i32, f64, f64] -> []
    2  (0.19%) × [i32, i32, f64, i32] -> [i32]
    2  (0.19%) × [i32, i32, f64, f64] -> []
    2  (0.19%) × [i32, i32, f64, f64, f64] -> [i32]
    2  (0.19%) × [i32, i32, f64, f64, f64, i32] -> [i32]
    2  (0.19%) × [i32, i64] -> [i32]
    2  (0.19%) × [i32, i64, i64] -> []
    2  (0.19%) × [i32, f32, i32, i32, i32, i32, i32] -> [i32]
    2  (0.19%) × [i32, f64, i32] -> []
    2  (0.19%) × [i32, f64, f64, i32, i32, i32] -> [i32]
    2  (0.19%) × [i64, i32] -> [i32]
    2  (0.19%) × [i64, i64] -> [i32]
    2  (0.19%) × [f32] -> [f32]
    2  (0.19%) × [f64, f64] -> [i32]
    2  (0.19%) × [f64, f64, i32] -> [f64]
    3  (0.28%) × [i32, i32] -> [f64]
    3  (0.28%) × [i32, i32, i32, i32, i32, i32, i32] -> []
    3  (0.28%) × [i32, i64] -> []
    3  (0.28%) × [i32, i64, i64, i32] -> []
    3  (0.28%) × [f64, i32] -> [f64]
    4  (0.37%) × [i32] -> [f64]
    4  (0.37%) × [i32, i32, f64] -> []
    4  (0.37%) × [i32, i64, i32] -> [i64]
    4  (0.37%) × [i32, f64] -> []
    5  (0.47%) × [i32] -> [i64]
    5  (0.47%) × [i32, f64, f64, i32] -> [i32]
    5  (0.47%) × [f64, f64] -> [f64]
    6  (0.56%) × [i32, i32, i32, i32, i32, i32, i32] -> [i32]
    6  (0.56%) × [i32, i32, f64, f64, i32] -> [i32]
    6  (0.56%) × [i32, i64, i64, i64, i64] -> []
    9  (0.84%) × [i32, f64, i32] -> [i32]
   10  (0.94%) × [f64, f64, f64, i32, i32, i32] -> []
   13  (1.22%) × [i32, i32, i32, i32, i32, i32] -> []
   15  (1.40%) × [i32, i32, i32, i32, i32] -> []
   16  (1.50%) × [f32, i32] -> [f32]
   19  (1.78%) × [] -> []
   19  (1.78%) × [] -> [i32]
   21  (1.97%) × [i32, i32, i32, i32, i32, i32] -> [i32]
   23  (2.15%) × [i32, i32, i32, i32] -> []
   25  (2.34%) × [f64] -> [f64]
   35  (3.28%) × [i32, i32, i32, i32, i32] -> [i32]
   43  (4.03%) × [i32, i32, i32, i32] -> [i32]
   49  (4.59%) × [i32, i32, i32] -> []
   93  (8.71%) × [i32, i32] -> []
   99  (9.27%) × [i32] -> []
  104  (9.74%) × [i32, i32, i32] -> [i32]
  155 (14.51%) × [i32] -> [i32]
  172 (16.10%) × [i32, i32] -> [i32]

Functions with at least one call_indirect: 352 (34.01% of all functions)

Table elements initialization:
         range: [    1,    2]   length:   2   unique funcs:    2   type: [i32, i32] -> [i32]
         range: [    3,    3]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [    4,    4]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [    5,    7]   length:   3   unique funcs:    3   type: [i32] -> [i32]
         range: [    8,    9]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   10,   11]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   12,   12]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   13,   13]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   14,   14]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   15,   15]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   16,   16]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   17,   17]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   18,   18]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   19,   19]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   20,   20]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   21,   21]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   22,   23]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   24,   24]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   25,   25]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   26,   26]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   27,   27]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   28,   30]   length:   3   unique funcs:    2   type: [i32, i32, i32] -> []
         range: [   31,   31]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   32,   32]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   33,   34]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   35,   35]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> []
         range: [   36,   37]   length:   2   unique funcs:    2   type: [i32, i32] -> [i32]
         range: [   38,   39]   length:   2   unique funcs:    2   type: [i32] -> [i32]
         range: [   40,   40]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   41,   41]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   42,   42]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   43,   43]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   44,   44]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   45,   45]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   46,   46]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   47,   47]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32] -> [i32]
         range: [   48,   48]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   49,   51]   length:   3   unique funcs:    3   type: [i32] -> [i32]
         range: [   52,   53]   length:   2   unique funcs:    2   type: [i32, i32] -> [i32]
         range: [   54,   54]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   55,   70]   length:  16   unique funcs:   16   type: [f32, i32] -> [f32]
         range: [   71,   71]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   72,   72]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   73,   73]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   74,   74]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   75,   75]   length:   1   unique funcs:    1   type: [i32, i32] -> [i32]
         range: [   76,   77]   length:   2   unique funcs:    2   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   78,   80]   length:   3   unique funcs:    2   type: [i32] -> [i32]
         range: [   81,   81]   length:   1   unique funcs:    1   type: [i32] -> []
         range: [   82,   82]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   83,   83]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32, i32] -> [i32]
         range: [   84,   84]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   85,   86]   length:   2   unique funcs:    2   type: [i32, i32] -> [i32]
         range: [   87,   87]   length:   1   unique funcs:    1   type: [i32, i32, i32, i32, i32] -> [i32]
         range: [   88,   88]   length:   1   unique funcs:    1   type: [i32, i64, i64, i32] -> [i32]
         range: [   89,   89]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   90,   90]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   91,   91]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   92,   92]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   93,   93]   length:   1   unique funcs:    1   type: [i32, f64, i32, i32, i32, i32] -> [i32]
         range: [   94,   94]   length:   1   unique funcs:    1   type: [i32, i32] -> []
         range: [   95,   95]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
         range: [   96,   96]   length:   1   unique funcs:    1   type: [i32] -> [i32]
         range: [   97,   97]   length:   1   unique funcs:    1   type: [i32, i64, i32] -> [i64]
         range: [   98,   98]   length:   1   unique funcs:    1   type: [i32, i32, i32] -> [i32]
  65 table init ranges in total

Patterns (=preceding instructions) of call_indirect:
  1592 × unrestricted                         source:   i32.load   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               99
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32] -> []
         functions matching by type (regardless whether they are in the table):               99
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
    89 × unrestricted                         source:   i32.load   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              155
         functions matching by type and present in table (regardless at which table index):   26
         functions matching by type and present in permissable table index range:             26
    23 × unrestricted                         source: local.(get|tee)   type [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              155
         functions matching by type and present in table (regardless at which table index):   26
         functions matching by type and present in permissable table index range:             26
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> []
         functions matching by type (regardless whether they are in the table):               93
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              172
         functions matching by type and present in table (regardless at which table index):   19
         functions matching by type and present in permissable table index range:             19
    14 × unrestricted                         source: local.(get|tee)   type [i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              172
         functions matching by type and present in table (regardless at which table index):   19
         functions matching by type and present in permissable table index range:             19
     3 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32] -> []
         functions matching by type (regardless whether they are in the table):               49
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              3
    10 × unrestricted                         source:   i32.load   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              104
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     2 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              104
         functions matching by type and present in table (regardless at which table index):    5
         functions matching by type and present in permissable table index range:              5
     1 × unrestricted                         source:      other   type [i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               43
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     3 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               21
         functions matching by type and present in table (regardless at which table index):    6
         functions matching by type and present in permissable table index range:              6
     1 × unrestricted                         source: local.(get|tee)   type [i32, i32, i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                6
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     2 × unrestricted                         source:   i32.load   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
     1 × unrestricted                         source: local.(get|tee)   type [i32, i64, i32] -> [i64]
         functions matching by type (regardless whether they are in the table):                4
         functions matching by type and present in table (regardless at which table index):    2
         functions matching by type and present in permissable table index range:              2
   135 × unrestricted                         source:   i32.load   type [i32, i64, i64, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     1 × unrestricted                         source: local.(get|tee)   type [i32, f64, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):                1
         functions matching by type and present in table (regardless at which table index):    1
         functions matching by type and present in permissable table index range:              1
     4 × unrestricted                         source:   i32.load   type [f32, i32] -> [f32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):   16
         functions matching by type and present in permissable table index range:             16
     4 × unrestricted                         source: local.(get|tee)   type [f32, i32] -> [f32]
         functions matching by type (regardless whether they are in the table):               16
         functions matching by type and present in table (regardless at which table index):   16
         functions matching by type and present in permissable table index range:             16
     1 × fixed index:      3                  source:  i32.const   type: [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              155
         functions matching by type and present in table (regardless at which table index):   26
         functions matching by type and present in permissable table index range:              1
     1 × fixed index:     27                  source:  i32.const   type: [i32] -> [i32]
         functions matching by type (regardless whether they are in the table):              155
         functions matching by type and present in table (regardless at which table index):   26
         functions matching by type and present in permissable table index range:              1
     7 × fixed index:     87                  source:  i32.const   type: [i32, i32, i32, i32, i32] -> [i32]
         functions matching by type (regardless whether they are in the table):               35
         functions matching by type and present in table (regardless at which table index):    3
         functions matching by type and present in permissable table index range:              1
  22 call_indirect patterns in total

function #3 is indirectly called with a fixed table index
  global.get 0
  i32.const 48
  i32.sub
  ...
function #27 is indirectly called with a fixed table index
  local.get 0
  i32.load offset=8 align=2
  local.tee 1
  ...
function #87 is indirectly called with a fixed table index
  global.get 0
  i32.const 11552
  i32.sub
  ...

call_indirect target equivalence classes (CFI equivalence classes):
  type: [i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 19, count (how often class appears: 4
  type: [i32] -> [i32], start idx: None, end idx: None, size (of class): 26, count (how often class appears: 23
  type: [i32, i32, i32] -> [], start idx: None, end idx: None, size (of class): 3, count (how often class appears: 3
  type: [i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 5, count (how often class appears: 2
  type: [i32] -> [], start idx: None, end idx: None, size (of class): 5, count (how often class appears: 2
  type: [i32, i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 1, count (how often class appears: 1
  type: [f32, i32] -> [f32], start idx: None, end idx: None, size (of class): 16, count (how often class appears: 4
  type: [i32, i32] -> [], start idx: None, end idx: None, size (of class): 1, count (how often class appears: 1
  type: [i32] -> [i32], start idx: Some(3), end idx: Some(3), size (of class): 1, count (how often class appears: 1
  type: [i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 19, count (how often class appears: 14
  type: [i32] -> [i32], start idx: Some(27), end idx: Some(27), size (of class): 1, count (how often class appears: 1
  type: [i32, i32, i32, i32, i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 2, count (how often class appears: 1
  type: [i32, i32, i32, i32, i32] -> [i32], start idx: Some(87), end idx: Some(87), size (of class): 1, count (how often class appears: 7
  type: [i32] -> [], start idx: None, end idx: None, size (of class): 5, count (how often class appears: 1592
  type: [i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 5, count (how often class appears: 10
  type: [i32, i64, i32] -> [i64], start idx: None, end idx: None, size (of class): 2, count (how often class appears: 1
  type: [i32, i32, i32, i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 6, count (how often class appears: 3
  type: [i32, i64, i64, i32] -> [i32], start idx: None, end idx: None, size (of class): 1, count (how often class appears: 135
  type: [i32, f64, i32, i32, i32, i32] -> [i32], start idx: None, end idx: None, size (of class): 1, count (how often class appears: 1
  type: [i32] -> [i32], start idx: None, end idx: None, size (of class): 26, count (how often class appears: 89
  type: [f32, i32] -> [f32], start idx: None, end idx: None, size (of class): 16, count (how often class appears: 4
  type: [i32, i64, i32] -> [i64], start idx: None, end idx: None, size (of class): 2, count (how often class appears: 2

latex CFI table line for this program: 538.imagick & C & 517.5\kern.5ptk\kern1pt & 1901 & 9.9\% & 1068 & 91 & 8.5\% & 74 & 6.9\% & 22 & 1 & 1592 & 86.4 & 3 \\
cfi_latex_csv_sum_avg_line:538.imagick,517550,17283,1901,1068,91,74,22,1,1592,86.4090909090909,3
benchmark,binary,class,size,count,source
cfi_csv_line:"538.imagick_r","imagick_r.wasm",0,19,4,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",1,26,23,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",2,3,3,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",3,5,2,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",4,5,2,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",5,1,1,"other"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",6,16,4,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",7,1,1,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",8,1,1,"i32.const"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",9,19,14,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",10,1,1,"i32.const"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",11,2,1,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",12,1,7,"i32.const"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",13,5,1592,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",14,5,10,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",15,2,1,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",16,6,3,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",17,1,135,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",18,1,1,"local.(get|tee)"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",19,26,89,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",20,16,4,"i32.load"
cfi_csv_line:"538.imagick_r","imagick_r.wasm",21,2,2,"i32.load"
total classes: 22
