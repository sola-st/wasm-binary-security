
emcc-fastcomp.wasm:	file format wasm 0x1

Sections:

     Type start=0x0000000a end=0x00000078 (size=0x0000006e) count: 16
   Import start=0x0000007b end=0x00000140 (size=0x000000c5) count: 9
 Function start=0x00000142 end=0x00000174 (size=0x00000032) count: 49
   Global start=0x00000176 end=0x0000017d (size=0x00000007) count: 1
   Export start=0x00000180 end=0x00000251 (size=0x000000d1) count: 15
     Elem start=0x00000253 end=0x00000263 (size=0x00000010) count: 1
     Code start=0x00000267 end=0x00004c4f (size=0x000049e8) count: 49
     Data start=0x00004c52 end=0x00004f1a (size=0x000002c8) count: 20

Section Details:

Type[16]:
 - type[0] (i32) -> i32
 - type[1] (i32, i32, i32) -> i32
 - type[2] (i32) -> nil
 - type[3] (i32, i32) -> nil
 - type[4] (i32, i32, i32) -> nil
 - type[5] (i32, i32) -> i32
 - type[6] () -> i32
 - type[7] (i32, f64, i32, i32, i32, i32) -> i32
 - type[8] (i32, i64, i32) -> i64
 - type[9] (i32, i32, i32, i32) -> i32
 - type[10] (i32, i32, i32, i32, i32) -> i32
 - type[11] (i64, i32) -> i32
 - type[12] (i32, i32, i32, i32, i32) -> nil
 - type[13] (i32, i32, f64, i32, i32, i32, i32) -> i32
 - type[14] (i64, i32, i32) -> i32
 - type[15] (f64, i32) -> f64
Import[9]:
 - func[0] sig=2 <env.abort> <- env.abort
 - func[1] sig=9 <env.___wasi_fd_write> <- env.___wasi_fd_write
 - func[2] sig=6 <env._emscripten_get_heap_size> <- env._emscripten_get_heap_size
 - func[3] sig=1 <env._emscripten_memcpy_big> <- env._emscripten_memcpy_big
 - func[4] sig=0 <env._emscripten_resize_heap> <- env._emscripten_resize_heap
 - func[5] sig=2 <env.setTempRet0> <- env.setTempRet0
 - global[0] i32 mutable=0 <- env.__table_base
 - memory[0] pages: initial=256 max=256 <- env.memory
 - table[0] elem_type=funcref init=10 max=10 <- env.table
Function[49]:
 - func[6] sig=0 <stackAlloc>
 - func[7] sig=6 <stackSave>
 - func[8] sig=2 <stackRestore>
 - func[9] sig=4
 - func[10] sig=2
 - func[11] sig=5 <_main>
 - func[12] sig=1
 - func[13] sig=6 <___errno_location>
 - func[14] sig=0
 - func[15] sig=8
 - func[16] sig=0
 - func[17] sig=0
 - func[18] sig=7
 - func[19] sig=3
 - func[20] sig=4
 - func[21] sig=10
 - func[22] sig=4
 - func[23] sig=0
 - func[24] sig=4
 - func[25] sig=14
 - func[26] sig=11
 - func[27] sig=11
 - func[28] sig=5
 - func[29] sig=12
 - func[30] sig=5
 - func[31] sig=5
 - func[32] sig=1
 - func[33] sig=0
 - func[34] sig=15
 - func[35] sig=1
 - func[36] sig=0
 - func[37] sig=3
 - func[38] sig=2
 - func[39] sig=0 <_malloc>
 - func[40] sig=2 <_free>
 - func[41] sig=0
 - func[42] sig=6 <_emscripten_get_sbrk_ptr>
 - func[43] sig=1 <_memcpy>
 - func[44] sig=1 <_memset>
 - func[45] sig=5 <dynCall_ii>
 - func[46] sig=13 <dynCall_iidiiii>
 - func[47] sig=9 <dynCall_iiii>
 - func[48] sig=4 <dynCall_vii>
 - func[49] sig=0
 - func[50] sig=7
 - func[51] sig=1
 - func[52] sig=8
 - func[53] sig=3
 - func[54] sig=10 <dynCall_jiji>
Global[1]:
 - global[1] i32 mutable=1 - init i32=5040
Export[15]:
 - func[13] <___errno_location> -> "___errno_location"
 - func[42] <_emscripten_get_sbrk_ptr> -> "_emscripten_get_sbrk_ptr"
 - func[40] <_free> -> "_free"
 - func[11] <_main> -> "_main"
 - func[39] <_malloc> -> "_malloc"
 - func[43] <_memcpy> -> "_memcpy"
 - func[44] <_memset> -> "_memset"
 - func[45] <dynCall_ii> -> "dynCall_ii"
 - func[46] <dynCall_iidiiii> -> "dynCall_iidiiii"
 - func[47] <dynCall_iiii> -> "dynCall_iiii"
 - func[54] <dynCall_jiji> -> "dynCall_jiji"
 - func[48] <dynCall_vii> -> "dynCall_vii"
 - func[6] <stackAlloc> -> "stackAlloc"
 - func[8] <stackRestore> -> "stackRestore"
 - func[7] <stackSave> -> "stackSave"
Elem[1]:
 - segment[0] table=0 count=10 - init global=0 <env.__table_base>
  - elem[0] = func[49]
  - elem[1] = func[14]
  - elem[2] = func[50]
  - elem[3] = func[18]
  - elem[4] = func[51]
  - elem[5] = func[12]
  - elem[6] = func[52]
  - elem[7] = func[15]
  - elem[8] = func[53]
  - elem[9] = func[19]
Code[49]:
 - func[6] size=27 <stackAlloc>
 - func[7] size=4 <stackSave>
 - func[8] size=6 <stackRestore>
 - func[9] size=243
 - func[10] size=158
 - func[11] size=16 <_main>
 - func[12] size=358
 - func[13] size=5 <___errno_location>
 - func[14] size=4
 - func[15] size=4
 - func[16] size=10
 - func[17] size=142
 - func[18] size=2992
 - func[19] size=41
 - func[20] size=346
 - func[21] size=2450
 - func[22] size=23
 - func[23] size=64
 - func[24] size=445
 - func[25] size=51
 - func[26] size=44
 - func[27] size=131
 - func[28] size=207
 - func[29] size=129
 - func[30] size=16
 - func[31] size=288
 - func[32] size=257
 - func[33] size=126
 - func[34] size=144
 - func[35] size=32
 - func[36] size=159
 - func[37] size=38
 - func[38] size=118
 - func[39] size=6815 <_malloc>
 - func[40] size=1991 <_free>
 - func[41] size=77
 - func[42] size=5 <_emscripten_get_sbrk_ptr>
 - func[43] size=454 <_memcpy>
 - func[44] size=280 <_memset>
 - func[45] size=12 <dynCall_ii>
 - func[46] size=25 <dynCall_iidiiii>
 - func[47] size=19 <dynCall_iiii>
 - func[48] size=17 <dynCall_vii>
 - func[49] size=8
 - func[50] size=8
 - func[51] size=8
 - func[52] size=8
 - func[53] size=6
 - func[54] size=40 <dynCall_jiji>
Data[20]:
 - segment[0] size=65 - init i32=1024
  - 0000400: 1100 0a00 1111 1100 0000 0005 0000 0000  ................
  - 0000410: 0000 0900 0000 000b 0000 0000 0000 0000  ................
  - 0000420: 1100 0f0a 1111 1103 0a07 0001 1309 0b0b  ................
  - 0000430: 0000 0906 0b00 000b 0006 1100 0000 1111  ................
  - 0000440: 11                                       .
 - segment[1] size=33 - init i32=1105
  - 0000451: 0b00 0000 0000 0000 0011 000a 0a11 1111  ................
  - 0000461: 000a 0000 0200 090b 0000 0009 000b 0000  ................
  - 0000471: 0b                                       .
 - segment[2] size=1 - init i32=1163
  - 000048b: 0c                                       .
 - segment[3] size=21 - init i32=1175
  - 0000497: 0c00 0000 000c 0000 0000 090c 0000 0000  ................
  - 00004a7: 000c 0000 0c                             .....
 - segment[4] size=1 - init i32=1221
  - 00004c5: 0e                                       .
 - segment[5] size=21 - init i32=1233
  - 00004d1: 0d00 0000 040d 0000 0000 090e 0000 0000  ................
  - 00004e1: 000e 0000 0e                             .....
 - segment[6] size=1 - init i32=1279
  - 00004ff: 10                                       .
 - segment[7] size=30 - init i32=1291
  - 000050b: 0f00 0000 000f 0000 0000 0910 0000 0000  ................
  - 000051b: 0010 0000 1000 0012 0000 0012 1212       ..............
 - segment[8] size=14 - init i32=1346
  - 0000542: 1200 0000 1212 1200 0000 0000 0009       ..............
 - segment[9] size=1 - init i32=1395
  - 0000573: 0b                                       .
 - segment[10] size=21 - init i32=1407
  - 000057f: 0a00 0000 000a 0000 0000 090b 0000 0000  ................
  - 000058f: 000b 0000 0b                             .....
 - segment[11] size=1 - init i32=1453
  - 00005ad: 0c                                       .
 - segment[12] size=40 - init i32=1465
  - 00005b9: 0c00 0000 000c 0000 0000 090c 0000 0000  ................
  - 00005c9: 000c 0000 0c00 0030 3132 3334 3536 3738  .......012345678
  - 00005d9: 3941 4243 4445 4605                      9ABCDEF.
 - segment[13] size=1 - init i32=1516
  - 00005ec: 01                                       .
 - segment[14] size=14 - init i32=1540
  - 0000604: 0100 0000 0100 0000 a808 0000 0004       ..............
 - segment[15] size=1 - init i32=1564
  - 000061c: 01                                       .
 - segment[16] size=5 - init i32=1579
  - 000062b: 0aff ffff ff                             .....
 - segment[17] size=2 - init i32=1648
  - 0000670: e005                                     ..
 - segment[18] size=2 - init i32=1828
  - 0000724: d80c                                     ..
 - segment[19] size=315 - init i32=1884
  - 000075c: 676c 6f62 616c 2063 6f6e 7374 2073 7472  global const str
  - 000076c: 696e 6700 2020 2020 2573 2c20 6164 6472  ing.    %s, addr
  - 000077c: 3a20 2570 2028 256c 7529 0a00 2020 2020  : %p (%lu)..    
  - 000078c: 7374 6163 6b20 7661 6c75 6520 696e 206c  stack value in l
  - 000079c: 6561 6628 2920 6675 6e63 7469 6f6e 2c20  eaf() function, 
  - 00007ac: 6164 6472 3a20 2570 2028 256c 7529 0a00  addr: %p (%lu)..
  - 00007bc: 2020 2020 7374 6163 6b20 6772 6f77 733a      stack grows:
  - 00007cc: 2025 6c64 0a00 2020 2020 6172 6776 5b30   %ld..    argv[0
  - 00007dc: 5d3a 2025 732c 2061 6464 723a 2025 7020  ]: %s, addr: %p 
  - 00007ec: 2825 6c75 290a 0073 7461 636b 2d61 6c6c  (%lu)..stack-all
  - 00007fc: 6f63 6174 6564 2028 6c6f 6361 6c29 2073  ocated (local) s
  - 000080c: 7472 696e 6700 6479 6e61 6d69 6361 6c6c  tring.dynamicall
  - 000081c: 7920 2868 6561 7029 2061 6c6c 6f63 6174  y (heap) allocat
  - 000082c: 6564 2073 7472 696e 6700 2020 696e 206c  ed string.  in l
  - 000083c: 6561 6628 2900 2020 696e 2069 6e74 6572  eaf().  in inter
  - 000084c: 6d65 6469 6174 6528 2900 2020 696e 206d  mediate().  in m
  - 000085c: 6169 6e28 2900 2d2b 2020 2030 5830 7800  ain().-+   0X0x.
  - 000086c: 286e 756c 6c29 002d 3058 2b30 5820 3058  (null).-0X+0X 0X
  - 000087c: 2d30 782b 3078 2030 7800 696e 6600 494e  -0x+0x 0x.inf.IN
  - 000088c: 4600 6e61 6e00 4e41 4e00 2e              F.nan.NAN..
