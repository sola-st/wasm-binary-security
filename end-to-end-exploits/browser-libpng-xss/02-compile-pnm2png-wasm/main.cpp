#include <string>

#include <emscripten.h>
#include <emscripten/val.h>

#include "libpng-1.6.35/contrib/pngminus/pnm2png.c"

// Small wrapper around pnm2png that opens and closes the input and output files.
void convert(const char * input_filename, const char * output_filename) {
    FILE* input = fopen(input_filename, "rb");
    FILE* output = fopen(output_filename, "wb");

    pnm2png(input, output, NULL, FALSE, FALSE);

    fclose(input);
    fclose(output);
}

// Using browser methods (implemented natively, so should be faster) to read virtual file to base64 string.
std::string file_to_base64(std::string filename) {
  return (char*) EM_ASM_INT({
    const arrayBuffer = FS.readFile(UTF8ToString($0));
    // See https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string
    const base64 = btoa([].reduce.call(new Uint8Array(arrayBuffer),function(p,c){return p+String.fromCharCode(c)},""));
    return allocateUTF8(base64);
  }, filename.c_str());
}

// Shorten to make code below a bit easier to read for paper.
typedef emscripten::val emcc;

EMSCRIPTEN_KEEPALIVE
extern "C"
void convert_and_preview() {
  // Stack-based buffer overflow in pnm2png() overwrites this string on the heap.
  std::string img_tag = "<img src='data:image/png;base64,";
  
  // Call existing C library (which has vulnerability CVE-2018-14550).
  convert("input.pnm", "output.png");

  // Append base64 data URL containing the PNG data to img tag.
  img_tag += file_to_base64("output.png") + "'>";

  // Use emscripten JavaScript bindings to call document.write() and add image tag to DOM.
  emcc::global("document").call<void>("write", img_tag);
}
